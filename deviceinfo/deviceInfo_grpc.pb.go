// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.0
// source: deviceinfo/deviceInfo.proto

package deviceinfo

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeviceInfo_ListAllMigDeviceInfos_FullMethodName = "/deviceinfo.DeviceInfo/listAllMigDeviceInfos"
	DeviceInfo_WatchMigDeviceInfos_FullMethodName   = "/deviceinfo.DeviceInfo/watchMigDeviceInfos"
)

// DeviceInfoClient is the client API for DeviceInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceInfoClient interface {
	ListAllMigDeviceInfos(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PodDeviceInfos, error)
	WatchMigDeviceInfos(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PodDeviceInfos], error)
}

type deviceInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceInfoClient(cc grpc.ClientConnInterface) DeviceInfoClient {
	return &deviceInfoClient{cc}
}

func (c *deviceInfoClient) ListAllMigDeviceInfos(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PodDeviceInfos, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PodDeviceInfos)
	err := c.cc.Invoke(ctx, DeviceInfo_ListAllMigDeviceInfos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInfoClient) WatchMigDeviceInfos(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PodDeviceInfos], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DeviceInfo_ServiceDesc.Streams[0], DeviceInfo_WatchMigDeviceInfos_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[empty.Empty, PodDeviceInfos]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceInfo_WatchMigDeviceInfosClient = grpc.ServerStreamingClient[PodDeviceInfos]

// DeviceInfoServer is the server API for DeviceInfo service.
// All implementations must embed UnimplementedDeviceInfoServer
// for forward compatibility.
type DeviceInfoServer interface {
	ListAllMigDeviceInfos(context.Context, *empty.Empty) (*PodDeviceInfos, error)
	WatchMigDeviceInfos(*empty.Empty, grpc.ServerStreamingServer[PodDeviceInfos]) error
	mustEmbedUnimplementedDeviceInfoServer()
}

// UnimplementedDeviceInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeviceInfoServer struct{}

func (UnimplementedDeviceInfoServer) ListAllMigDeviceInfos(context.Context, *empty.Empty) (*PodDeviceInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllMigDeviceInfos not implemented")
}
func (UnimplementedDeviceInfoServer) WatchMigDeviceInfos(*empty.Empty, grpc.ServerStreamingServer[PodDeviceInfos]) error {
	return status.Errorf(codes.Unimplemented, "method WatchMigDeviceInfos not implemented")
}
func (UnimplementedDeviceInfoServer) mustEmbedUnimplementedDeviceInfoServer() {}
func (UnimplementedDeviceInfoServer) testEmbeddedByValue()                    {}

// UnsafeDeviceInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceInfoServer will
// result in compilation errors.
type UnsafeDeviceInfoServer interface {
	mustEmbedUnimplementedDeviceInfoServer()
}

func RegisterDeviceInfoServer(s grpc.ServiceRegistrar, srv DeviceInfoServer) {
	// If the following call pancis, it indicates UnimplementedDeviceInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeviceInfo_ServiceDesc, srv)
}

func _DeviceInfo_ListAllMigDeviceInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInfoServer).ListAllMigDeviceInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInfo_ListAllMigDeviceInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInfoServer).ListAllMigDeviceInfos(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInfo_WatchMigDeviceInfos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceInfoServer).WatchMigDeviceInfos(m, &grpc.GenericServerStream[empty.Empty, PodDeviceInfos]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceInfo_WatchMigDeviceInfosServer = grpc.ServerStreamingServer[PodDeviceInfos]

// DeviceInfo_ServiceDesc is the grpc.ServiceDesc for DeviceInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deviceinfo.DeviceInfo",
	HandlerType: (*DeviceInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "listAllMigDeviceInfos",
			Handler:    _DeviceInfo_ListAllMigDeviceInfos_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "watchMigDeviceInfos",
			Handler:       _DeviceInfo_WatchMigDeviceInfos_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "deviceinfo/deviceInfo.proto",
}
